@model BlogPost

@{
    ViewData["Title"] = "Update";
    var thisId = Model.Id;
}

<h1>Edit Post</h1>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();
    <div>
            @* Checks validation for whole form *@
            @Html.ValidationSummary(true, "", new { @class = "text-danger" } )
            @* Title Inputs and validations *@
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class="control-label col-md-2"})
                @Html.EditorFor(model => model.Title, "", new {@class="form-control"})
                @Html.ValidationMessageFor(model => model.Title, "", new {@class="text-danger"})
            </div>
            @* Author Inputs and validation *@
            <div class="form-group">
                @Html.LabelFor(model => model.Author, htmlAttributes: new { @class="control-label col-md-2"})
                @Html.EditorFor(model => model.Author, "", new {@class="form-control"})
                @Html.ValidationMessageFor(model => model.Author, "", new {@class="text-danger"})
            </div>
            @* Description Inputs and validations *@
            <div class="form-group">
                @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class="control-label col-md-2"})
                @Html.EditorFor(model => model.ShortDescription, "", new {@class="form-control"})
                @Html.ValidationMessageFor(model => model.ShortDescription, "", new {@class="text-danger"})
            </div>
            @* Content of blogpost, Inputs and validations *@
            <div class="form-group">
                @Html.LabelFor(model => model.Content, htmlAttributes: new { @class="control-label col-md-2"})
                @Html.EditorFor(model => model.Content, "", new {@class="form-control"})
                @Html.ValidationMessageFor(model => model.Content, "", new {@class="text-danger"})
            </div>

            @* Submit button *@
            <input type="submit" value="Update" class="btn btn-dark" />

    </div>

    @* Delete button *@
    <button type="button" class="btn btn-danger" onclick="toggleVisible()">
        Delete
    </button>
}

@* Alert container *@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div id="alert" class="d-none">
        <p>This will permanantly remove the post from the database.</p>
        <p>Are you sure you want to continue?</p>
        <button type="button" class="btn btn-success">
            @Html.ActionLink("Delete Post", "Delete", "Blog", new {id = thisId}, new {@class="text-white text-decoration-none"})
        </button>
        <button type="button" class="btn btn-dark" onclick="toggleVisible()">
            Cancel
        </button>
    </div>
}

@* Return to Index list *@
<p>
    @Html.ActionLink("Back to list", "Index")
</p>

<script>
    // Target confirmation container
    const alertCont = document.getElementById('alert');
    // Bool for alert window visibility
    let visible = false;
    console.log()

    // toggle visibility via classList
    const toggleVisible = () => {
        if (!visible) {
            alertCont.classList = "";
            visible = true;
            return;
        }

        alertCont.classList = "d-none";
        visible = false;
        return;
    }

</script>